#Fichier de script parmettant de calculer les noramles des sommets
#de l'enveloppe d'une molécule grâce à la librairie "alphashape3d".
library("alphashape3d")
#Librairie utiliser pour la fonction write.matrix
library("MASS")
readInput <- function(file) {
setwd("~/Documents/Code/Exemples/")
data <- read.table(file, skip=2)
data <- cbind(data$V2, data$V3, data$V4)
invisible(data)
}
writeOutput <- function(data, file) {
setwd("~/Documents/Code/PrC5")
write.matrix(data, file)
}
writeEdges <- function(data, file) {
setwd("~/Documents/Code/PrC5")
write(dim(data)[1], file)
write.table(data, file, append=TRUE, row.names=FALSE, col.names=FALSE)
}
#Fonction modifiée de la librairie alphashape
sufa2 <- function (x, indexAlpha = 1, display = FALSE, col = 3, scale = 1, 
    ...) 
{
    as3d <- x
    tetra <- as3d$tetra
    triangles <- as3d$triang
    edges <- as3d$edge
    vertex <- as3d$vertex
    x <- as3d$x
    if (class(indexAlpha) == "character" & (indexAlpha == "ALL" | 
        indexAlpha == "all")) 
        indexAlpha = 1:length(as3d$alpha)
    if (any(indexAlpha > length(as3d$alpha)) | any(indexAlpha <= 
        0)) {
        if (max(indexAlpha) > length(as3d$alpha)) 
            error = max(indexAlpha)
        else error = min(indexAlpha)
        stop(paste("indexAlpha out of bound : valid range = 1:", 
            length(as3d$alpha), ", problematic value = ", error, 
            sep = ""), call. = TRUE)
    }
    normals.obj = NULL
    for (iAlpha in indexAlpha) {
        tr <- triangles[triangles[, 8 + iAlpha] == 2 | triangles[, 8 + iAlpha] == 3,
         c("tr1", "tr2", "tr3")]
        te <- tetra[tetra[, 5 + iAlpha] == 1, 1:4]
        normMat <- numeric(length(tr))
        middlePoint <- numeric(length(tr))
        retour <- .C("triangleNormals", as.integer(tr), dim(tr)[1], 
            as.integer(te), dim(te)[1], as.numeric(x), dim(x)[1], 
            normMat, middlePoint)
        normMat = matrix(retour[[7]], ncol = 3)
        middlePoint = matrix(retour[[8]], ncol = 3)
        if (display) {
            segment = matrix(rep(0, dim(normMat)[1] * 6), ncol = 3)
            for (ii in 1:dim(normMat)[1]) {
                segment[2 * ii - 1, ] = middlePoint[ii, ]
                segment[2 * ii, ] = middlePoint[ii, ] + scale * 
                  normMat[ii, ]
            }
            rgl.open()
            plot(as3d, indexAlpha = iAlpha)
            segments3d(segment, col = col, alpha = 1, ...)
        }
        normals.obj <- c(normals.obj, list(list(normals = normMat, 
            centers = middlePoint)))
        class(normals.obj[[length(normals.obj)]]) = "normals"
    }
    if (length(indexAlpha) == 1) {
        normals.obj <- normals.obj[[1]]
    }
    else {
        class(normals.obj) <- "normals-List"
    }
    invisible(normals.obj)
}
#Calcul des noramls au sommets
verticesNormals <- function(as3d, surfaces) {
triangles <- as3d$triang
x <- as3d$x
alpha <- as3d$alpha
surNor <- surfaces$normals
tr <- triangles[triangles[, 9] == 2 | triangles[, 9] == 3,
 c("tr1", "tr2", "tr3")]
normMat <- matrix(numeric(length(x)), ncol=3)
for (i in 1 : dim(tr)[1]) {
for(j in 1 : dim(tr)[2]) {
normMat[tr[i,j],] <- normMat[tr[i,j],] + surNor[i,]
}
}
#computeEdges(tr)
invisible(normMat)
}
affichage3d <- function(as3d, nor) {
  segment = matrix(rep(0, dim(nor)[1] * 6), ncol = 3)
  for (ii in 1:dim(nor)[1]) {
      segment[2 * ii - 1, ] = as3d$x[ii, ]
      segment[2 * ii, ] = as3d$x[ii, ] + nor[ii, ]
  }
  rgl.open()
  plot(as3d)
 segments3d(segment, col = 3, alpha = 1)
}
test <- function(input.file, alpha) {
data <- readInput(input.file)
ashape3d.obj <- ashape3d(data, alpha = alpha)
surfaceNormals.obj <- sufa2(ashape3d.obj)
normals.obj <- verticesNormals(ashape3d.obj, surfaceNormals.obj)
affichage3d(ashape3d.obj, normals.obj)
}
test("ABABEL.xyz', 2)
}
"
Q
Quit
help
test("ABABEL.xyz", 2)
q()
